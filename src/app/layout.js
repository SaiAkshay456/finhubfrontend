// import { headers } from "next/headers";
// import { Geist, Geist_Mono } from "next/font/google";
// // import Sidebar from "../components/Sidebar";
// // import { ComponentUser } from "./page";
// import { Hero } from "../components/Hero";
// import ClientLayoutWrapper from "../components/ClientLayoutWrapper";
// import HeroLanding from "@/components/HeroLanding";
// import Header from "@/components/Header";
// import Sidebar from "@/components/Sidebar";
// // import ClientLastVisitWrapper from "../components/ClientLastVisitWrapper";
// import "./globals.css";
// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });
// // 
// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// import { cookies } from "next/headers";
// import { AuthProvider } from "../providers/AuthProvider";
// import { redirect } from "next/navigation";
// export default async function RootLayout({ children }) {
//   const cookieStore = await cookies();
//   const token = cookieStore.get("token")?.value;
//   console.log(token);
//   let user = null;
//   let isAuthorized = false;
//   //no token 
//   if (token) {
//     try {
//       const res = await fetch("http://localhost:3030/api/v1/auth/user/me", {
//         method: "GET",
//         headers: {
//           Authorization: `Bearer ${token}`,
//         },
//         credentials: "include",
//         // cache: "no-store",
//       });
//       if (res.ok) {
//         const data = await res.json();
//         user = data.user;
//         isAuthorized = true;
//         // redirect("/")
//       }
//     } catch (e) {
//       console.log(e);
//     }
//   }
//   console.log("hiiiiiii")
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >

//         {/* <Sidebar /> */}
//         <AuthProvider initialUser={user} initialAuth={isAuthorized}>
//           <ClientLayoutWrapper>
//             <Hero />
//             {children}
//           </ClientLayoutWrapper>
//         </AuthProvider>
//       </body>
//     </html>
//   );
// }

import './globals.css';
import { Geist, Geist_Mono } from 'next/font/google';
import { cookies } from 'next/headers';
import { AuthProvider } from '@/providers/AuthProvider';
import ClientLayoutWrapper from '@/components/ClientLayoutWrapper';
import { Hero } from '@/components/Hero';
const geistSans = Geist({ subsets: ['latin'], variable: '--font-geist-sans' });
const geistMono = Geist_Mono({ subsets: ['latin'], variable: '--font-geist-mono' });

export const metadata = {
  title: 'Dashboard',
  description: 'Landing + Auth',
};

export default async function RootLayout({ children }) {
  const cookieStore = cookies();
  const token = cookieStore.get('token')?.value;
  console.log(token)
  let user = null;
  let isAuthorized = false;

  if (token) {
    try {
      const res = await fetch('http://localhost:3030/api/v1/auth/user/me', {
        headers: {
          Authorization: `Bearer ${token}`
        },
        cache: 'no-store',
      });
      if (res.ok) {
        const data = await res.json();
        user = data.user;
        isAuthorized = true;
      }
      console.log(isAuthorized)
    } catch (err) {
      console.log('Auth fetch error:', err);
    }
  }

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <AuthProvider initialUser={user} initialAuth={isAuthorized}>
          <ClientLayoutWrapper>
            {children}
          </ClientLayoutWrapper>
        </AuthProvider>
      </body>
    </html>
  );
}